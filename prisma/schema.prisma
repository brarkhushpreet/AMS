generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(uuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  role    Role     @default(STUDENT)
  student Student?
  teacher Teacher?
}

model Student {
  id           String   @id @default(uuid())
  userId       String   @unique
  enrollmentNo String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user               User               @relation(fields: [userId], references: [id])
  courses            Course[]
  attendanceRecords  AttendanceRecord[]
  courseEnrollments  CourseEnrollment[]
}

model Teacher {
  id          String   @id @default(uuid())
  userId      String   @unique
  employeeId  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user              User              @relation(fields: [userId], references: [id])
  courses           Course[]
  attendanceRecords AttendanceRecord[]
  attendanceLinks   AttendanceLink[]
}

model Course {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  teacher           Teacher            @relation(fields: [teacherId], references: [id])
  teacherId         String
  students          Student[]
  attendanceRecords AttendanceRecord[]
  attendanceLinks   AttendanceLink[]
  courseEnrollments CourseEnrollment[]
}

model AttendanceRecord {
  id                String           @id @default(uuid())
  date              DateTime
  status            AttendanceStatus
  scanLocation      String?
  isPotentialProxy  Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  student           Student          @relation(fields: [studentId], references: [id])
  studentId         String
  course            Course           @relation(fields: [courseId], references: [id])
  courseId          String
  teacher           Teacher          @relation(fields: [teacherId], references: [id])
  teacherId         String
  attendanceLink    AttendanceLink   @relation(fields: [attendanceLinkId], references: [id])
  attendanceLinkId  String
  session           String
}

model AttendanceLink {
  id        String   @id @default(uuid())
  expiresAt DateTime
  location  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teacher   Teacher @relation(fields: [teacherId], references: [id])
  teacherId String
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  attendanceRecords AttendanceRecord[]
}

model CourseEnrollment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String

  @@unique([studentId, courseId])
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
}